//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""TopDownView"",
            ""id"": ""ac72a665-6d95-47d1-ba34-3dddac2396e9"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""fa524a70-0b8d-4286-88b4-ad8e75123046"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""8a8d61bc-25cf-4a7d-a080-a5d26b2c8cdf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9ebc642e-b857-470e-a656-f872f1e5e8cb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""00efc11c-fc06-4390-a79b-d8a8886295c3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fbe5c962-ead3-492b-aac1-06d4b1232486"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1cc3e9f7-7e3d-49ec-b2d9-4970fb7d6a1c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""KB arrows"",
                    ""id"": ""5e76fac0-8103-402f-a44d-3c405a00b139"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""40e1b618-bf58-43e4-8145-2168d5eef388"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a2de663c-7f4e-43dd-b15a-da563598885b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""28f0c57b-c066-4c64-9f13-70db33c33bf6"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""91fe99b1-f8dd-4e3d-a3be-d0ff16a2945d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""SideView"",
            ""id"": ""637011a9-0467-40f1-a448-a199b1e1697e"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
        // TopDownView
        m_TopDownView = asset.FindActionMap("TopDownView", throwIfNotFound: true);
        m_TopDownView_Move = m_TopDownView.FindAction("Move", throwIfNotFound: true);
        // SideView
        m_SideView = asset.FindActionMap("SideView", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TopDownView
    private readonly InputActionMap m_TopDownView;
    private List<ITopDownViewActions> m_TopDownViewActionsCallbackInterfaces = new List<ITopDownViewActions>();
    private readonly InputAction m_TopDownView_Move;
    public struct TopDownViewActions
    {
        private @PlayerInputActions m_Wrapper;
        public TopDownViewActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_TopDownView_Move;
        public InputActionMap Get() { return m_Wrapper.m_TopDownView; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TopDownViewActions set) { return set.Get(); }
        public void AddCallbacks(ITopDownViewActions instance)
        {
            if (instance == null || m_Wrapper.m_TopDownViewActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TopDownViewActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(ITopDownViewActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(ITopDownViewActions instance)
        {
            if (m_Wrapper.m_TopDownViewActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITopDownViewActions instance)
        {
            foreach (var item in m_Wrapper.m_TopDownViewActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TopDownViewActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TopDownViewActions @TopDownView => new TopDownViewActions(this);

    // SideView
    private readonly InputActionMap m_SideView;
    private List<ISideViewActions> m_SideViewActionsCallbackInterfaces = new List<ISideViewActions>();
    public struct SideViewActions
    {
        private @PlayerInputActions m_Wrapper;
        public SideViewActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_SideView; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SideViewActions set) { return set.Get(); }
        public void AddCallbacks(ISideViewActions instance)
        {
            if (instance == null || m_Wrapper.m_SideViewActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SideViewActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(ISideViewActions instance)
        {
        }

        public void RemoveCallbacks(ISideViewActions instance)
        {
            if (m_Wrapper.m_SideViewActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISideViewActions instance)
        {
            foreach (var item in m_Wrapper.m_SideViewActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SideViewActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SideViewActions @SideView => new SideViewActions(this);
    public interface ITopDownViewActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface ISideViewActions
    {
    }
}
